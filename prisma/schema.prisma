// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Country {
  id          Int      @id @default(autoincrement())
  label       String   @unique
  code        String   @unique
  description String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  towns       Town[]
}

model Town {
  id        Int      @id @default(autoincrement())
  label     String   @unique
  countryId Int
  country   Country  @relation(fields: [countryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  name                 String
  surname              String?
  password             String
  telephone            String?   @unique
  address              String?
  logo                 String?
  description          String?
  otp                  String?
  resetPasswordOtp     String?
  resetPasswordExpires DateTime?
  role                 Role      @default(CLIENT)
  status               Boolean   @default(false)

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now()) @updatedAt

  Subscription Subscription[]
  Shop         Shop[]
  Meet         Meet[]
  Order        Order[]
  Rating       Rating[]
}

enum Role {
  ADMIN
  PROVIDER
  CLIENT
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  label       String    @unique
  description String?
  image       String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  Product     Product[]
}

model ServiceCategory {
  id          Int       @id @default(autoincrement())
  label       String    @unique
  description String?
  image       String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  services    Service[]
}

model Shop {
  id             Int       @id @default(autoincrement())
  userId         Int
  user           User      @relation(fields: [userId], references: [id])
  code           String
  name           String
  description    String?
  location       String?
  phoneNumber    String
  logo           String?
  website        String?
  status         String?
  socialNetworks Json?
  images         Json?
    
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
  
  Product        Product[]
  services       Service[]
}

model Service {
  id          Int     @id @default(autoincrement())
  serviceCategoryId   Int
  serviceCategory     ServiceCategory @relation(fields: [serviceCategoryId], references: [id])
  shopId      Int
  shop        Shop    @relation(fields: [shopId], references: [id])
  label       String
  description String?
  time        Int
  amount      Int
  discount    Int?
  image       String?
  isVisible   String?

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt

  Meet         Meet[]
}

model Product {
  id                Int             @id @default(autoincrement())
  shopId            Int
  shop              Shop            @relation(fields: [shopId], references: [id])
  productCategoryId Int
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  name              String
  quantity          Int
  price             Float
  discount          Float?
  images            Json
  description       String
  status            String
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt

  Order             Order[]
}

model SubscriptionPlan {
  id          Int      @id @default(autoincrement())
  label       String   @unique
  price       Float
  duration    Int
  description String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  Subscription Subscription[]
}

model Payment {
  id             Int       @id @default(autoincrement())
  subscriptionId Int
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  amount         Float
  paymentDate    DateTime?
  status         String    @default("pending")

  createdAt      DateTime  @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

}

model Subscription {
  id                 Int      @id @default(autoincrement())
  userId             Int
  user               User             @relation(fields: [userId], references: [id])
  subscriptionPlanId Int
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  status             String
  startDate          DateTime @default(now())
  endDate            DateTime

  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  payments         Payment[]
}

model Meet {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  serviceId Int
  service   Service  @relation(fields: [serviceId], references: [id])
  date      DateTime
  hour      String
  place     String
  status    String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  rating             Rating[]
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId Int
  user   User  @relation(fields: [userId], references: [id])
  meetId Int
  meet   Meet  @relation(fields: [meetId], references: [id])
  notation  Int
  comment   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Schedule {
  id         Int      @id @default(autoincrement())
  event      String
  start_date DateTime
  end_date   DateTime

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Order {
  id          String   @id @default(uuid())
  userId      Int
  user    User    @relation(fields: [userId], references: [id])
  productId   Int
  product Product @relation(fields: [productId], references: [id])
  quantity    Int
  totalAmount Float
  status      String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}
